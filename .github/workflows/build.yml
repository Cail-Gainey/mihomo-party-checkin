name: Build
on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号（如：v1.0.0）'
        required: true
        default: ''
      release_type:
        description: '发布类型'
        required: true
        default: 'stable'
        type: choice
        options:
          - stable
          - beta

permissions: write-all

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      changelog: ${{ steps.get-changelog.outputs.changelog }}
      version_without_v: ${{ steps.get-version.outputs.version_without_v }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "version_without_v=${VERSION#v}" >> $GITHUB_OUTPUT
          else
            VERSION=${{ github.event.inputs.version }}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "version_without_v=${VERSION#v}" >> $GITHUB_OUTPUT
          fi
          
          echo "使用版本号: ${VERSION}"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        run: npm install -g pnpm
      
      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Extract Changelog
        id: get-changelog
        run: |
          # 获取版本号（不带v前缀）
          VERSION="${{ steps.get-version.outputs.version_without_v }}"
          echo "版本号: ${VERSION}"
          
          # 使用grep和sed提取版本内容
          START_LINE=$(grep -n "## \\[${VERSION}\\]" changelog.md | cut -d ':' -f1)
          
          if [ -z "$START_LINE" ]; then
            echo "未找到带方括号的版本 ${VERSION}，尝试不带方括号的格式"
            START_LINE=$(grep -n "## ${VERSION}" changelog.md | cut -d ':' -f1)
          fi
          
          if [ -n "$START_LINE" ]; then
            echo "找到版本起始行: $START_LINE"
            
            # 找到下一个版本的起始行
            NEXT_VERSION_LINE=$(tail -n +$((START_LINE + 1)) changelog.md | grep -n "^## " | head -1 | cut -d ':' -f1)
            
            if [ -n "$NEXT_VERSION_LINE" ]; then
              # 计算实际行号
              NEXT_VERSION_LINE=$((START_LINE + NEXT_VERSION_LINE))
              echo "找到下一个版本起始行: $NEXT_VERSION_LINE"
              
              # 提取内容（不包含版本标题行）
              CHANGELOG_CONTENT=$(sed -n "$((START_LINE + 1)),$((NEXT_VERSION_LINE - 1))p" changelog.md)
            else
              # 如果没有下一个版本，提取到文件末尾
              echo "未找到下一个版本，提取到文件末尾"
              CHANGELOG_CONTENT=$(tail -n +$((START_LINE + 1)) changelog.md)
            fi
            
            # 去除开头的空行和结尾的多余空行
            CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed '/./,$!d' | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}')
          else
            echo "未找到版本 ${VERSION}，使用默认消息"
            CHANGELOG_CONTENT="版本 ${VERSION} 发布"
          fi
          
          # 输出提取的更新日志
          echo "提取的更新日志:"
          echo "$CHANGELOG_CONTENT"
          
          # 将内容输出为变量，处理多行
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Update package.json version
        run: |
          # 获取版本号（不带v前缀）
          VERSION="${{ steps.get-version.outputs.version_without_v }}"
          
          # 更新package.json中的版本号
          sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" package.json
          echo "已更新package.json中的版本号为 ${VERSION}"
      
      - name: Generate update files
        run: |
          # 获取版本号（不带v前缀）
          VERSION="${{ steps.get-version.outputs.version_without_v }}"
          
          # 为不同平台创建符合Electron自动更新格式的latest-{platform}.yml文件
          
          # Windows平台更新文件
          cat > latest-win.yml << EOF
          version: $VERSION
          files:
            - url: mihomo-party-checkin-windows-$VERSION-x64-setup.exe
              sha512: placeholder
              size: 0
              path: mihomo-party-checkin-windows-$VERSION-x64-setup.exe
            - url: mihomo-party-checkin-windows-$VERSION-x64-portable.7z
              sha512: placeholder
              size: 0
              path: mihomo-party-checkin-windows-$VERSION-x64-portable.7z
          path: mihomo-party-checkin-windows-$VERSION-x64-setup.exe
          sha512: placeholder
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          EOF
          
          # macOS平台更新文件
          cat > latest-mac.yml << EOF
          version: $VERSION
          files:
            - url: mihomo-party-checkin-macos-$VERSION-arm64.dmg
              sha512: placeholder
              size: 0
              path: mihomo-party-checkin-macos-$VERSION-arm64.dmg
            - url: mihomo-party-checkin-macos-$VERSION-x64.dmg
              sha512: placeholder
              size: 0
              path: mihomo-party-checkin-macos-$VERSION-x64.dmg
          path: mihomo-party-checkin-macos-$VERSION-arm64.dmg
          sha512: placeholder
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          EOF
          
          # Linux平台更新文件
          cat > latest-linux.yml << EOF
          version: $VERSION
          files:
            - url: mihomo-party-checkin-linux-$VERSION-x64.deb
              sha512: placeholder
              size: 0
              path: mihomo-party-checkin-linux-$VERSION-x64.deb
            - url: mihomo-party-checkin-linux-$VERSION-arm64.deb
              sha512: placeholder
              size: 0
              path: mihomo-party-checkin-linux-$VERSION-arm64.deb
          path: mihomo-party-checkin-linux-$VERSION-x64.deb
          sha512: placeholder
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          EOF
          
          # 显示生成的文件内容
          echo "生成的latest-win.yml内容:"
          cat latest-win.yml
          echo "生成的latest-mac.yml内容:"
          cat latest-mac.yml
          echo "生成的latest-linux.yml内容:"
          cat latest-linux.yml
      
      - name: Upload update files
        uses: actions/upload-artifact@v4
        with:
          name: latest-yml
          path: |
            latest-win.yml
            latest-mac.yml
            latest-linux.yml
          if-no-files-found: error

  windows:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x64
          - ia32
          - arm64
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pnpm
        run: npm install -g pnpm
      - name: Update package.json version
        run: |
          # 获取版本号（不带v前缀）
          $VERSION = "${{ needs.prepare.outputs.version_without_v }}"
          
          # 更新package.json中的版本号
          $content = Get-Content package.json -Raw
          $content = $content -replace '"version": ".*"', "`"version`": `"$VERSION`""
          $content | Set-Content package.json
          echo "已更新package.json中的版本号为 $VERSION"
      - name: Install Dependencies
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm add @mihomo-party/sysproxy-win32-${{ matrix.arch }}-msvc
          pnpm prepare --${{ matrix.arch }}
      - name: Build
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          APP_VERSION: ${{ needs.prepare.outputs.version }}
        run: pnpm build:win --${{ matrix.arch }}
      - name: Add Portable Flag
        run: |
          New-Item -Path "PORTABLE" -ItemType File
          Get-ChildItem dist/*portable.7z | ForEach-Object {
            7z a $_.FullName PORTABLE
          }
      - name: Generate checksums
        run: pnpm checksum setup.exe portable.7z
      - name: List build directory
        run: |
          dir dist
          dir dist\win || echo "dist\win not found"
      - name: Download latest.yml
        uses: actions/download-artifact@v4
        with:
          name: latest-yml
          path: dist/win/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows ${{ matrix.arch }}
          path: |
            dist/win/*.sha256
            dist/win/*setup.exe
            dist/win/*portable.7z
            dist/win/latest-win.yml
          if-no-files-found: error
      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/win/*.sha256
            dist/win/*setup.exe
            dist/win/*portable.7z
            dist/win/latest-win.yml
          body: |
            ## 更新内容

            ${{ needs.prepare.outputs.changelog }}

            ## 下载地址
            请在下方附件中下载对应系统和架构的安装包
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' }}
          tag_name: ${{ needs.prepare.outputs.version }}

  linux:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x64
          - arm64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pnpm
        run: npm install -g pnpm
      - name: Update package.json version
        run: |
          # 获取版本号（不带v前缀）
          VERSION="${{ needs.prepare.outputs.version_without_v }}"
          
          # 更新package.json中的版本号
          sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" package.json
          echo "已更新package.json中的版本号为 ${VERSION}"
      - name: Install Dependencies
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm add @mihomo-party/sysproxy-linux-${{ matrix.arch }}-gnu
          sed -i "s/productName: Mihomo Party/productName: mihomo-party/" electron-builder.yml
          pnpm prepare --${{ matrix.arch }}
      - name: Build
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          APP_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          # 确保build/linux目录存在
          mkdir -p build/linux
          # 确保postinst文件存在并有执行权限
          cp -f build/linux/postinst build/linux/postinst || echo "// 安装后脚本" > build/linux/postinst
          chmod +x build/linux/postinst
          pnpm build:linux --${{ matrix.arch }}
      - name: Generate checksums
        run: pnpm checksum .deb .rpm
      - name: List build directory
        run: |
          ls -la dist
          ls -la dist/linux || echo "dist/linux not found"
      - name: Download latest.yml
        uses: actions/download-artifact@v4
        with:
          name: latest-yml
          path: dist/linux/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Linux ${{ matrix.arch }}
          path: |
            dist/linux/*.sha256
            dist/linux/*.deb
            dist/linux/*.rpm
            dist/linux/latest-linux.yml
          if-no-files-found: error
      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/linux/*.sha256
            dist/linux/*.deb
            dist/linux/*.rpm
            dist/linux/latest-linux.yml
          body: |
            ## 更新内容

            ${{ needs.prepare.outputs.changelog }}

            ## 下载地址
            请在下方附件中下载对应系统和架构的安装包
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' }}
          tag_name: ${{ needs.prepare.outputs.version }}

  macos:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x64
          - arm64
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup pnpm
        run: npm install -g pnpm
      - name: Update package.json version
        run: |
          # 获取版本号（不带v前缀）
          VERSION="${{ needs.prepare.outputs.version_without_v }}"
          
          # 更新package.json中的版本号
          sed -i "" "s/\"version\": \".*\"/\"version\": \"${VERSION}\"/" package.json
          echo "已更新package.json中的版本号为 ${VERSION}"
      - name: Install Dependencies
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
        run: |
          pnpm install --no-frozen-lockfile
          pnpm add @mihomo-party/sysproxy-darwin-${{ matrix.arch }}
          pnpm prepare --${{ matrix.arch }}
      - name: Build
        env:
          npm_config_arch: ${{ matrix.arch }}
          npm_config_target_arch: ${{ matrix.arch }}
          CSC_IDENTITY_AUTO_DISCOVERY: false
          APP_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          # 确保build/pkg-scripts目录存在
          mkdir -p build/pkg-scripts
          # 确保postinstall文件存在并有执行权限
          cp -f build/pkg-scripts/postinstall build/pkg-scripts/postinstall || echo "#!/bin/bash\nexit 0" > build/pkg-scripts/postinstall
          chmod +x build/pkg-scripts/postinstall
          pnpm build:mac --${{ matrix.arch }}
      - name: Generate checksums
        run: pnpm checksum .dmg
      - name: List build directory
        run: |
          ls -la dist
          ls -la dist/mac || echo "dist/mac not found"
      - name: Download latest.yml
        uses: actions/download-artifact@v4
        with:
          name: latest-yml
          path: dist/mac/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: MacOS ${{ matrix.arch }}
          path: |
            dist/mac/*.sha256
            dist/mac/*.dmg
            dist/mac/latest-mac.yml
          if-no-files-found: error
      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/mac/*.sha256
            dist/mac/*.dmg
            dist/mac/latest-mac.yml
          body: |
            ## 更新内容

            ${{ needs.prepare.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'beta' }}
          tag_name: ${{ needs.prepare.outputs.version }}
